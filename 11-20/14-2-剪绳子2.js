/**
 * TODO
 * 题目：给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。
 * - 请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 * - 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 * 考点：大数取余。
 * 解法：循环取余，还有二分法取余，我懒得写了哈哈。
 */
var cuttingRope = function (n) {
	if (n <= 3) return n - 1
	let res = 1,
		a = Math.floor(n / 3),
		b = n % 3
	while (a > 1) {
		res = (3 * res) % (1e9 + 7)
		a -= 1
	}
	if (b == 2) return (res * 6) % (1e9 + 7)
	if (b == 1) return (res * 4) % (1e9 + 7) // XXX 这里的处理和第一题稍有不同，因为1个大数*3越界取模后，可能已经不是3的倍数，不能*(4/3)
	return (res * 3) % (1e9 + 7)
}
